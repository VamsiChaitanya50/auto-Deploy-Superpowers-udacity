version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-v1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v1]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-v1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]
      - run:
          name: front-end test
          command: |
            cd backend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v1]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v1]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople_B \
              --stack-name "UdapeopleB" \
              --parameter-overrides ID="raj01" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople_F \
              --stack-name "Udapeople-raj01" \
              --parameter-overrides ID="raj01"  
        
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            echo [ all ] > inventory
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=UdaPeople_B" --output text >> inventory --region us-west-2
            ansible-playbook deploy-backend.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]


